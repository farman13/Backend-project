- .gitkeep : create this file inside a empty folder so that we can push that folder to github.

- nodemon : so that we dont have to rereun the server again after any changes.


*** DB ***
- DB IP address : On the mongodb cluster change the ip address allowance from 0.0.0.0/0 (allowing everyone) to just the IP address where our backend is deployed (backend can be deployed on aws, digitalOcean, etc).

- DB is in another continent, so always use try catch and promises bcoz it takes time & maybe gives error while interacting with data.
- always use async await while interacting with DB.

*** NodeJS ***
- nodejs gives us access of process (basically our current application is running on a process ) . process is just the reference of that it gives us some methods like process.exit(1) [for handling errors]

*** File importing ***
- fix it by giving the proper path till the file(incling file name).
- if above not work then add the file extension also.


*** dotenv ***
- include dotenv into the project using "import" is also taught in the lecture. (for this some changes in package.json script also required)

*** express ***
- app.use(express.urlencoded({ extended: true })) : used for parsing incoming URL-encoded form data (like from HTML <form> submissions) and makes it available in req.body.

- app.use(express.static("public")) : it is used to serve static files(html,css,js,pdfs,imgs) to the server which is stored inside the public folder.

- app.use(cookieParser()) : it is used to set and read the cookies on the users browser by the server only.
 Mainly it parses cookies from incoming requests and makes them available via req.cookies.
 
JWTs are often stored from frontend :
In cookies → then cookie-parser is needed.
In Authorization headers → no cookie-parser needed.

- AsyncHandler util : The asyncHandler function is a wrapper and higher-order function that simplifies error handling for asynchronous route handlers in Express.js. It prevents you from having to write repetitive try-catch blocks in each async function.
simple : AsyncHandler ek wrapper function hai jo ki ek async function input lega and apne andr ek or function bnayega and us function ka output return krega, wo function promisefy krega input function ko and if it catches the error then it passes it to next(err).
next(err) triggers Express’s centralized error-handling middleware.

- ApiError class util : This ApiError class extends the built-in Error class and allows you to create custom, structured error responses.

stack : stack is a string that represents the stack trace at the time the error was created. It helps you understand where the error happened in your code.
It’s super helpful when debugging because it shows you:
Which function threw the error, What chain of function calls led there, Exactly where (file + line number)

- ApiResponse class util : It helps structure server responses in a clean, consistent format.




