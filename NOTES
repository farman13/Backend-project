- .gitkeep : create this file inside a empty folder so that we can push that folder to github.

- nodemon : so that we dont have to re-run the server again and again after any changes.


*** DB ***
- DB IP address : On the mongodb cluster change the ip address allowance from 0.0.0.0/0 (allowing everyone) to just the IP address where our backend is deployed (backend can be deployed on aws, digitalOcean, etc).

- DB is in another continent, so always use try catch and promises bcoz it takes time & maybe gives error while interacting with data.
- always use async await while interacting with DB.

*** NodeJS ***
- nodejs gives us access of process (basically our current application is running on a process ) . process is just the reference of that it gives us some methods like process.exit(1) [for handling errors]

*** File importing ***
- fix it by giving the proper path till the file(incling file name).
- if above not work then add the file extension also.


*** dotenv ***
- include dotenv into the project using "import" is also taught in the lecture. (for this some changes in package.json script also required)

*** express ***
- app.use(express.urlencoded({ extended: true })) : used for parsing incoming URL-encoded form data (like from HTML <form> submissions) and makes it available in req.body.

- app.use(express.static("public")) : it is used to serve static files(html,css,js,pdfs,imgs) to the server which is stored inside the public folder.

- app.use(cookieParser()) : it is used to set and read the cookies on the users browser by the server only.
 Mainly it parses cookies from incoming requests and makes them available via req.cookies.
 
If jwt tokens from frontend are sent using  :
In cookies ‚Üí then cookie-parser is needed.
In Authorization headers ‚Üí no cookie-parser needed.

- AsyncHandler util : The asyncHandler function is a wrapper and higher-order function that simplifies error handling for asynchronous route handlers in Express.js. It prevents you from having to write repetitive try-catch blocks in each async function.
simple : AsyncHandler ek wrapper function hai jo ki ek async function input lega and apne andr ek or function bnayega and us function ka output return krega, wo function promisefy krega input function ko and if it catches the error then it passes it to next(err).
next(err) triggers Express‚Äôs centralized error-handling middleware.

In Express, if an async route throws an error, it‚Äôs not caught by default, and you must use .catch() or try...catch. Otherwise, the app crashes or the error is silently ignored.


- ApiError class util : This ApiError class extends the built-in Error class and allows you to create custom, structured error responses.

the ApiError is thrown in your backend code and the response is sent to the frontend by your Express global error-handling middleware.

when the ApiError throws error it is catched by the AsyncHandler and then error is forwarded to express global error middleware then it will sent a response to the frontend.

stack : stack is a string that represents the stack trace at the time the error was created. It helps you understand where the error happened in your code.
It‚Äôs super helpful when debugging because it shows you:
Which function threw the error, What chain of function calls led there, Exactly where (file + line number)

- ApiResponse class util : It helps structure server responses in a clean, consistent format.

- if we are exporting using "export default functionName" then we can change the name while importing that function,
  but if we are exporting using "export {functionName}" then we have to import it using the same name or we have to use 'as' keyword i we want to change the name.
  
*** cloudinary ***
- It is a third party platform for storing files, images, videos. it gives us the string to access the data after storing.

*** multer ***
- Multer is a middleware for handling multipart/form-data, which is primarily used for uploading files in Node.js applications using Express. It parses incoming form data that contains files.
üìÅ Stores files either in memory or on disk (you choose).
üß© Used with forms that include file uploads (<input type="file" />).

now using multer we are first retreiving the file from the user and then storing it locally on the server inside the public->temp folder. then taking files from it and storing it on the cloudinary.


